target C {
    platform: {
        name: "RP2040",
        board: "pololu_3pi_2040_robot:usb"
    },
    files: ["../lib/"],
    threading: false,
    //no-compile: true,
    cmake-include: ["../platform/robot_lib.txt"]
}

import Display from "lib/Display.lf"
import Motors from "lib/Motors.lf"
import Encoders from "lib/Encoders.lf"
import GyroTrap from "lib/Imu.lf"

preamble {=
    // sprintf
    #include <stdio.h>
=}

main reactor {
    d0 = new Display();
    m0 = new Motors();
    e0 = new Encoders();
    imu0 = new GyroTrap();

    logical action next;

    initial mode STOP {
        reaction(startup, reset) -> d0.line0, 
                                    m0.left_pwr, 
                                    m0.right_pwr,
                                    next {=
            lf_set(d0.line0, "STOP");
            printf("STOP");
            lf_set(m0.left_pwr, 0.0);
            lf_set(m0.right_pwr, 0.0);
            lf_schedule(next, SEC(2));
        =}

        reaction(next) -> reset(DRIVE) {=
            lf_set_mode(DRIVE);
        =}
    }

    mode DRIVE {
        reset state prev_tick:int(0);

        reaction(reset) e0.right_cnt -> d0.line0, m0.right_pwr, m0.left_pwr {=
            lf_set(d0.line0, "DRIVE");
            printf("DRIVE");
            lf_set(m0.right_pwr, 0.1);
            lf_set(m0.left_pwr, 0.1);
            self->prev_tick = e0.right_cnt->value;
        =}
        
        reaction(e0.right_cnt) -> reset(TURN) {=
            int dif;
            dif = e0.right_cnt->value - self->prev_tick;
            if (dif <= -720) {
                lf_set_mode(TURN);
            } 
        =}
    }
    
    mode TURN {
        reaction(reset) -> d0.line0, m0.right_pwr, m0.left_pwr, 
                           imu0.reset_angle {=
            lf_set(d0.line0, "TURN");
            printf("TURN");
            lf_set(imu0.reset_angle, true);
            lf_set(m0.left_pwr, -0.1);
            lf_set(m0.right_pwr, 0.1);
        =}
        
        reaction(imu0.z) -> reset(STOP) {=
            if (imu0.z->value >= 90) {
                lf_set_mode(STOP);
            }
        =}
    }

    // display reactions
    reaction(e0.right_cnt) -> d0.line1 {=
        static char buf[17];
        snprintf(buf, 17, "rcnt: %d", e0.right_cnt->value);
        lf_set(d0.line1, buf); 
    =}

    reaction(imu0.z) -> d0.line2 {=
        static char buf[17];
        snprintf(buf, 17, "z_gyro: %.2f", imu0.z->value);
        lf_set(d0.line2, buf); 
    =}

}
