target C {
    platform: "Pico",
    files: ["../lib/"],
    threading: false,
    cmake-include: ["../platform/pico_config.txt", 
                    "../platform/robot_lib.txt"],
}

import Display from "lib/Display.lf"
import Motors from "lib/Motors.lf"
import Encoders from "lib/Encoders.lf"

preamble {=
    // sprintf
    #include <stdio.h>
=}

main reactor {
    d0 = new Display();
    m0 = new Motors();
    e0 = new Encoders();
    logical action next;

    reaction(e0.left_cnt) -> d0.line1 {=
        static char buf[17];
        snprintf(buf, 17, "lcnt: %d", e0.left_cnt->value);
        lf_set(d0.line1, buf); 
    =}
    
    reaction(e0.right_cnt) -> d0.line2 {=
        static char buf[17];
        snprintf(buf, 17, "rcnt: %d", e0.right_cnt->value);
        lf_set(d0.line2, buf); 
    =}
    
    initial mode STOP {
        reaction(startup, reset) -> d0.line0, 
                                    m0.left_pwr, 
                                    m0.right_pwr,
                                    next {=
            lf_set(d0.line0, "STOP");
            lf_set(m0.left_pwr, 0.0);
            lf_set(m0.right_pwr, 0.0);
            lf_schedule(next, SEC(5));
        =}

        reaction(next) -> reset(LEFT) {=
            lf_set_mode(LEFT);
        =}
    }

    mode LEFT {
        timer t2(0, 100 msec);
        reset state lpwr:float(-0.5);

        reaction(reset) -> d0.line0, 
                                    m0.right_pwr {=
            lf_set(d0.line0, "LEFT");
            lf_set(m0.right_pwr, 0.0);
        =}
        
        reaction(t2) -> m0.left_pwr, next {=
            lf_set(m0.left_pwr, self->lpwr);
            self->lpwr += 0.05;
            if (self->lpwr >= 0.5) {
                lf_schedule(next, 0);
            }
        =} 

        reaction(next) -> reset(RIGHT) {=
            lf_set_mode(RIGHT);
        =}
    }
    
    mode RIGHT {
        timer t3(0, 100 msec);
        reset state rpwr:float(-0.5);

        reaction(reset) -> d0.line0, m0.left_pwr {=
            lf_set(d0.line0, "RIGHT");
            lf_set(m0.left_pwr, 0.0);
        =}
        
        reaction(t3) -> m0.right_pwr, next {=
            lf_set(m0.right_pwr, self->rpwr);
            self->rpwr += 0.05;
            if (self->rpwr >= 0.5) {
                lf_schedule(next, 0);
            }
        =} 

        reaction(next) -> reset(STOP) {=
            lf_set_mode(STOP);
        =}
    }

}