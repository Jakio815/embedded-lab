target C {
    platform: "Pico", 
    threading: false,
}

preamble {=
    #include <pico/stdlib.h>
    #include <pololu_3pi_2040_robot.h>

    // static global imu instance struct
    static imu_inst_t imu_inst;
=}

// trapazoidal integration
reactor GyroTrap(period:time(100 msec)) {
    timer t1(period, period);
    input rst:bool;
    
    output x:float;
    output y:float;
    output z:float;
    // x,y,z
    reset state prev_deg_x:float(0);
    reset state prev_deg_y:float(0);
    reset state prev_deg_z:float(0);
    reset state prev_vel_x:float(0);
    reset state prev_vel_y:float(0);
    reset state prev_vel_z:float(0);

    reaction(startup) {=
        imu_init(&imu_inst);
    =}

    reaction(rst) {=
        // reset
        self->prev_deg_x = 0.0;
        self->prev_deg_y = 0.0;
        self->prev_deg_z = 0.0;
        self->prev_vel_x = 0.0;
        self->prev_vel_y = 0.0;
        self->prev_vel_z = 0.0;
    =}

    // integrate gyro 
    reaction(t1) -> x, y, z {=
        axes_data_t gyro_data;
        imu_read_gyro(&imu_inst, &gyro_data);

        self->prev_deg_x += (gyro_data.x + self->prev_vel_x) * (self->period * 1e-9) / 2;
        self->prev_deg_y += (gyro_data.y + self->prev_vel_y) * (self->period * 1e-9) / 2;
        self->prev_deg_z += (gyro_data.z + self->prev_vel_z) * (self->period * 1e-9) / 2;
        
        self->prev_vel_x = gyro_data.x;
        self->prev_vel_y = gyro_data.y;
        self->prev_vel_z = gyro_data.z;
        
        // set to integrated value 
        lf_set(x, self->prev_deg_x);
        lf_set(y, self->prev_deg_y);
        lf_set(z, self->prev_deg_z);
    =} 
}

reactor Imu {
    timer t1(0, 100 msec);
    
    // integrate gyro when asserted
    input rst_gyro:bool;

    output x_accel:float;
    output y_accel:float;
    output z_accel:float;

    output x_gyro:float;
    output y_gyro:float;
    output z_gyro:float;

    // x,y,z
    gyro0 = new GyroTrap();
    rst_gyro -> gyro0.rst;

    reaction(startup) {=
        imu_init(&imu_inst);
    =}
    
    reaction(t1) gyro0.x, gyro0.y, gyro0.z -> 
                x_accel, y_accel, z_accel, 
                x_gyro, y_gyro, z_gyro {=
        axes_data_t acc_data;
        imu_read_acc(&imu_inst, &acc_data);

        lf_set(x_accel, acc_data.x);
        lf_set(y_accel, acc_data.y);
        lf_set(z_accel, acc_data.z);
       
        lf_set(x_gyro, gyro0.x->value); 
        lf_set(y_gyro, gyro0.y->value); 
        lf_set(z_gyro, gyro0.z->value); 
        
        //axes_data_t gyro_data;
        //imu_read_gyro(&imu_inst, &gyro_data);
       //lf_set(x_gyro, gyro_data.x); 
       //lf_set(y_gyro, gyro_data.y); 
       //lf_set(z_gyro, gyro_data.z); 
    =}

}
